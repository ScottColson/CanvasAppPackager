using System.Collections.Generic;
// ReSharper disable All

namespace CanvasAppPackager.Poco
{
    class Header
    {
        public string DocVersion { get; set; }
        // There are more properties ...
    }

    public class OverridableProperties
    {
    }

    public class Property
    {
        public string Name { get; set; }
        public ControlThisItemType InvariantType { get; set; }
        public string PropertyRuleCategory { get; set; }
        public string PropertyDisplayName { get; set; }
    }

    public class Template
    {
        public string Id { get; set; }
        public string Version { get; set; }
        public string LastModifiedTimestamp { get; set; }
        public string Name { get; set; }
        public bool? FirstParty { get; set; }
        public bool IsCustomGroupControlTemplate { get; set; }
        public string CustomGroupControlTemplateName { get; set; }
        public bool IsComponentDefinition { get; set; }
        public string DynamicControlDefinitionJson { get; set; }
        public string CustomControlDefinitionJson { get; set; }
        public List<CustomProperty> CustomProperties { get; set; }
        public Component ComponentDefinitionInfo { get; set; }
        public string TemplateDisplayName { get; set; }
        public string SourceLibraryId { get; set; }
        public OverridableProperties OverridableProperties { get; set; }
    }

    public class DataEntity
    {
        public string EntityInfoIdentity { get; set; }
        public string EntityInfoName { get; set; }
        public bool EntityInfoIsTable { get; set; }
        public string EntityInfoParentDSName { get; set; }
        public string EntityInfoRelatedEntityPath { get; set; }
    }
    public class OptionSet
    {
        public bool OptionSetIsValue { get; set; }
        public string OptionSetName { get; set; }
    }

    public class TypeTemplate
    {
        public string TemplateName { get; set; }
        public bool IsMetaLoc { get; set; }
        public bool Intangible { get; set; }
        public bool IsDataLimited { get; set; }
        public ControlThisItemType ExpandoType { get; set; }
        public List<Property> Properties { get; set; }
    }

    public class Rule
    {
        public string Property { get; set; }
        public string Category { get; set; }
        public string InvariantScript { get; set; }
        public string RuleProviderType { get; set; }
        public string NameMap { get; set; }        
    }

    /// <summary>
    /// This has been changed to be either a string, or this object type for the ControlPropertyState
    /// </summary>
    public class ControlPropertyState
    {
        public string InvariantPropertyName { get; set; }
        public bool AutoRuleBindingEnabled { get; set; }
        public string AutoRuleBindingString { get; set; }
        public string NameMapSourceSchema { get; set; }
        public bool IsLockable { get; set; }
        public string AFDDataSourceName { get; set; }
    }

    public class ControlType
    {
        public string Name { get; set; }
        public string Kind { get; set; }
        public string EnumString { get; set; }
        public DataEntity DataEntity { get; set; }
        public OptionSet OptionSet { get; set; }
        public TypeTemplate Template { get; set; }
        public List<ControlType> Type { get; set; }
        public List<string> ProjectionInfoDataSources { get; set; }
        public ControlThisItemType Attachment { get; set; }
    }

    public class ControlThisItemType
    {
        public string Version { get; set; }
        public ControlType Type { get; set; }
    }

    public class Child : IControl
    {
        public string Type { get; set; }
        public string Name { get; set; }
        public string LastModifiedTimestamp { get; set; }
        public Template Template { get; set; }
        public double Index { get; set; }
        public int? PublishOrderIndex { get; set; }
        public string VariantName { get; set; }
        public string LayoutName { get; set; }
        public string MetaDataIDKey { get; set; }
        public bool PersistMetaDataIDKey { get; set; }
        public bool IsFromScreenLayout { get; set; }
        public string StyleName { get; set; }
        public string Parent { get; set; }
        public bool IsDataControl { get; set; }
        public bool IsGroupControl { get; set; }
        public bool IsAutoGenerated { get; set; }
        public object PropToDynamicType { get; set; }
        public List<Rule> Rules { get; set; }
        public List<object> ControlPropertyState { get; set; }
        public bool IsLocked { get; set; }
        public string ControlUniqueId { get; set; }
        public ControlThisItemType ControlThisItemType { get; set; }
        public Metadata Metadata { get; set; }
        public List<Child> Children { get; set; }
        public List<ChildOrder> ChildrenOrder { get; set; }

        public List<string> GroupedControlsKey { get; set; }

        public Child()
        {
            Children = new List<Child>();
        }
    }

    public class ChildOrder
    {
        public List<ChildOrder> ChildrenOrder { get; set; }
        public string Name { get; set; }
    }

    public class Component
    {
        public string Name { get; set; }
        public string LastModifiedTimestamp { get; set; }
        public List<Rule> Rules { get; set; }
        public List<object> ControlPropertyState { get; set; }
        public List<Child> Children { get; set; }

        public Component()
        {
            Children = new List<Child>();
        }
    }

    public class CustomProperty
    {
        public string Name { get; set; }
        public int Category { get; set; }
        public string Type { get; set; }
        public string PropertyDataTypeKey { get; set; }
        public bool Hidden { get; set; }
        public bool? IsResettable { get; set; }
        public string DisplayName { get; set; }
        public string Tooltip { get; set; }
    }

    public class Metadata
    {
        public string Description { get; set; }

        public bool AllowCustomization { get; set; }
    }

    public class TopParent : IControl
    {
        public string Type { get; set; }
        public string Name { get; set; }
        public Template Template { get; set; }
        public double Index { get; set; }
        public int? PublishOrderIndex { get; set; }
        public string VariantName { get; set; }
        public string LayoutName { get; set; }
        public string MetaDataIDKey { get; set; }
        public bool PersistMetaDataIDKey { get; set; }
        public bool IsFromScreenLayout { get; set; }
        public string StyleName { get; set; }
        public string Parent { get; set; }
        public bool IsDataControl { get; set; }
        public bool IsGroupControl { get; set; }
        public bool IsAutoGenerated { get; set; }
        public object PropToDynamicType { get; set; }
        public List<Rule> Rules { get; set; }
        public List<object> ControlPropertyState { get; set; }
        public bool IsLocked { get; set; }
        public string ControlUniqueId { get; set; }
        public List<Child> Children { get; set; }
        public List<ChildOrder> ChildrenOrder { get; set; }

        public TopParent()
        {
            Children = new List<Child>();
        }
    }

    public class CanvasAppScreen
    {
        public TopParent TopParent { get; set; }
    }

    public interface IControl
    {
        string Name { get; set; }
        public Template Template { get; set; }
        List<Rule> Rules { get; set; }
        string ControlUniqueId { get; set; }
        List<Child> Children { get; set; }
        List<ChildOrder> ChildrenOrder { get; set; }
        int? PublishOrderIndex { get; set; }
    }
}
